---
permalink: /posts/milestones-developing-z-wave-devices
title: "Milestones developing Z-Wave devices"
excerpt: ""
categories: [Z-Wave, product development]
tags: [Z-Wave 500 Series, IoT]
toc: true
toc_sticky: true
#last_modified_at: "YYYY-MM-DD"
---

# Introduction
There are already many articles explaining the Z-Wave protocol and the properties of the Z-Wave chips. They are especially useful for getting to know Z-Wave and deciding whether you want to commit to the technology. But once you are invested and start developing, it is easy to get overwhelmed by the amount of information and difficult to see, what your next steps should be, which priorities they have, and how they come together in the end.  
While all this is clear to you, after you created your first device, you are painfully lacking this orientation in the beginning. My goal with this text is to give you some orientation and make your start with Z-Wave as smooth as possible.

# Summary
<!--TODO-->

# General most important lessons
## RF design
RF designs are not to be underestimated. Get a professional consultant or let a company do it for you, if you have no experience. At the very least, do it early on and check your range.

## Z-Wave experts
If your product is so complicated, that it requires a lot of knowledge of the Z-Wave protocol---too much that one can learn it in 6 months good enough---make sure you get a trusted consultant. I think you can trust anyone that PepperOne is renting to you, but if you grab someone from the public job market, don't create a dependency. Don't let that developer do the implementation and especially not without oversight. Instead, let the developer help you understand the situation, explain to you the necessary steps, and then guide one of your developers towards the final implementation. If it turns out, the Z-Wave expert is not much of an expert at all, you can just get rid of him and hire a new one while the acquired Z-Wave knowledge stays with you. Especially in the beginning, you are vulnearable to letting people bullshit you, because you don't know better. The more you learn, the more you will be able to tell when somebody is not worth their money. Make sure you can cut them without loosing your expertise.

# Milestones, steps, and how they come together

# What do document (what counts in the end/ doing it efficiently)
for management (requirements), tech (specification), and end users (manual)

# An overview to track/summarize your development status

# Reader's digest: the most important docs for each area

